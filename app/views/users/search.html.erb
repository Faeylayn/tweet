<h1>Search!</h1>

<!-- <form action="/users/search" method="GET">
  <input
    type="text"
    name="query"
    value="<%= @query %>">

  <input type="submit" value="Search Users!">
</form>

<ul>
  <% @users.each do |user| %>
    <li>
      <%= link_to user.username, user_url(user) %>
      <%= render "follows/form", user: user %>
    </li>
  <% end %>
</ul> -->

<form class="users-search">
  <label>Search!
    <input class="search-query" type="text" name="query" value="">
  </label>

  <ul class="users">

  </ul>
</form>


<script>

$.UsersSearch = function (el) {
  this.$el = $(el);
  this.$input = $(this.$el.find("input"));
  this.$users = $(this.$el.find(".users"));
  this.handleInput();
};

$.UsersSearch.prototype.handleInput = function () {
  this.$input.on("keydown", function(event) {
    var $input = $(event.currentTarget);
    var searchValue = $input.val();
    $.ajax({
      type: "get",
      url: "<%= search_users_url %>",
      dataType : "json",
      data: {query: searchValue},
      success: function (data) {
        this.renderResults(data);
      }.bind(this)
    })
  }.bind(this))
};

$.UsersSearch.prototype.renderResults = function(data) {
  this.$users.children().remove();
  for (var i = 0; i < data.length; i++) {
    var options = {};
    options.userId = data[i].id;
    options.followState = data[i].followed;
    this.$users.append("<li>" + data[i].username + "</li>");
    this.$users.append("<button class='follow-toggle' id=" + data[i].id + "></button>");
    $("#" + data[i].id).followToggle(options);
  }
}

$.fn.UsersSearch = function () {
  return this.each(function () {
    new $.UsersSearch(this);
  });
};

$(function () {
  $("form.users-search").UsersSearch();
});

$.FollowToggle = function (el, options) {
  this.$el = $(el);
  this.userId = this.$el.data("user-id") || options.userId;
  this.initialFollowState = this.$el.data("initial-follow-state") || options.followState;
  this.followState = (this.initialFollowState) ? "followed" : "unfollowed";
  this.render();
  this.handleClick();
};

$.FollowToggle.prototype.render = function () {
  var buttonText;

  if (this.followState === "followed"){
    buttonText = "Unfollow!";

  }else if (this.followState === "unfollowed"){
    buttonText = "Follow!";
  }
  this.$el.prop("disabled", false);
  this.$el.text(buttonText);
};

$.FollowToggle.prototype.handleClick = function () {
  this.$el.on("click", function(event) {
    var $button = $(event.currentTarget);
    event.preventDefault();
    this.$el.prop("disabled", true)
    if (this.followState === "followed") {
      this.followState = "unfollowing";
      this.render();
      $.ajax({
        type: "delete",
        url: "./" + this.userId + "/follow",
        dataType: "json",
        success: function(data) {
          this.followState = "unfollowed";
          this.render();
        }.bind(this)
      })
    } else {
      this.followState = "following";
      this.render();
      $.ajax({
        type: "post",
        url: "./" + this.userId + "/follow",
        dataType: "json",
        success: function(data) {
            this.followState = "followed";
            this.render();
        }.bind(this)
      })
    }
  }.bind(this))
}

$.fn.followToggle = function (options) {
return this.each(function () {
  new $.FollowToggle(this, options);
});
};
</script>
